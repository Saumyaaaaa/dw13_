in package json add 
    "type":"module",
if we do so, js will support import ,export feature


frontend requests backend request are:(CRUD)
    create -> post
    read    -> get
    update  ->patch
    delete  ->delete


Making API means frontend request backend 
                and
 backend does the task according to the request


 To request we need url and method



 url=localhost:8000/trainees/123?name=nitan & age=30 & address=gagalfeddi
 url=route?query
 route=baseUrl + routeParams



one request must have one response


middleware  
    function which has request,res,next are called middlewares
    next() is used to trigger another middleware


                Two types of Middleware base on error

normal middleware= (req,res,next)=>{} to trigger another middleware we call next()
error middleware= (err,req,res,next)=>{} to trigger another middleware we call next(data)


                Two types of Middleware base on location

route middleware => defined in route
application middleware => define in index.js (or main file)




we have to define structure of data 

define array (model) 
name object
define object (schema)




Rules of Model 
    variable name must be same as model name
    model name must be of first letter capital
    model name must be singular



To make a CRUD
    1 schema
    2 model
    3 controller
    3 route
    4 index 


////in Searching type doesn't matter



//dotenv
//file
//define variable
//call variable

//you must make dotenv file in root directory

in dot env file we write 
  
    //sensitive
        email,password

    //port
       url


    cors(cross-origin-resource-sharing)
     cors => enable







login management
 1. Register
 2. login
 3. my profile
 4. my profile update
 5. update password
 6. forgot and reset password
 7. delete user
 8. read all user
 9. read specific user



 1. Register process
    a. save data to database  => Register
            //fullName
            //email
            //password
            //dob
            //gender
            //role => superAdmin, admin , customer
            //isVerifiedEmail


    b. verify email
            //postman token
            //get token
            //verify token
            //get _id form token
            //make isVerifiedEmail true

2.Login
    //email and password
    //check if that email exist in our database => (if email not found throw error)
    //check if that email verified => (if not, throw error)
    //check if the password match with hashed password in db =>(if no match throw error)
    //generate token => (attach _id)
    //send back token to postman

