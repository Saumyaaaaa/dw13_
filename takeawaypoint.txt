in package json add 
    "type":"module",
if we do so, js will support import ,export feature


frontend requests backend request are:(CRUD)
    create -> post
    read    -> get
    update  ->patch
    delete  ->delete


Making API means frontend request backend 
                and
 backend does the task according to the request


 To request we need url and method



 url=localhost:8000/trainees/123?name=nitan & age=30 & address=gagalfeddi
 url=route?query
 route=baseUrl + routeParams



one request must have one response


middleware  
    function which has request,res,next are called middlewares
    next() is used to trigger another middleware


                Two types of Middleware base on error

normal middleware= (req,res,next)=>{} to trigger another middleware we call next()
error middleware= (err,req,res,next)=>{} to trigger another middleware we call next(data)


                Two types of Middleware base on location

route middleware => defined in route
application middleware => define in index.js (or main file)




we have to define structure of data 

define array (model) 
name object
define object (schema)




Rules of Model 
    variable name must be same as model name
    model name must be of first letter capital
    model name must be singular



To make a CRUD
    1 schema
    2 model
    3 controller
    3 route
    4 index 


////in Searching type doesn't matter



//dotenv
//file
//define variable
//call variable

//you must make dotenv file in root directory

in dot env file we write 
  
    //sensitive
        email,password

    //port
       url


    cors(cross-origin-resource-sharing)
     cors => enable







login management
 1. Register                                 /web-users => post
 2. login
 3. my profile
 4. my profile update
 5. update password
 6. forgot and reset password
 7. read all user                          /web-users => get =>admin,superAdmin
 8. read specific user                    /web-users/:id => get  =>admin,superAdmin
 9. delete user                            /web-users/:id => delete =>superAdmin
 10.update specific user                    /web-users/:id => patch  =>admin,superAdmin

 isAuthenticated,authorized
 

 1. Register process
    a. save data to database  => Register
            //fullName
            //email
            //password
            //dob
            //gender
            //role => superAdmin, admin , customer
            //isVerifiedEmail


    b. verify email
            //postman token
            //get token
            //verify token
            //get _id form token
            //make isVerifiedEmail true

2.Login
    //email and password
    //check if that email exist in our database => (if email not found throw error)
    //check if that email verified => (if not, throw error)
    //check if the password match with hashed password in db =>(if no match throw error)
    //generate token => (attach _id)
    //send back token to postman

3. my profile
    1st part
    //pass token from postman
    //get token from postman
    //validate token (if token is not valid throw error)
    //get _id from token
    //pass _id to another middleware
    //next()

    2nd part
    //find the details by using that _id

4. my profile update

    //update profile
    //pass token from postman
    //pass that token throw isAuthenticated
    //get _id
    //get data from body
    //delete email and password from body
    //update profile
    //send response


    //update password

        //pass token
        //isAuthenticated
        //get _id
        //get body from postman
                oldPassword
                newPassword

            //check either oldPassword match with database password(if not throw error)
            //hash newPassword
            //save to database
            //send response





    // isAuthenticated => middleware
    //postman pass token
    //isAuthenticated
    //_id
    //read details of that _id
    //get role of that details


    //if the role is either admin or superadmin next
    //else throw error with status code 403











//status code

    //success => 2xx

        //create =201
        //read =200
        //update =201
        //delete =200

    //error =>4xx

        //400 => data not found
        //401 => token not valid, credential not match
        //403 => token is valid , but not authorized
        //409 => conflict (duplicate)
        //404 => api not found



//forgot password process

    1. forgot password
        //pass email from postman
        //get email from postman
        //get email
        //check if that email exist in our db (if not throw error with status code 404)
        //send email with link (fronted link)
        //send response

    2. reset password
        //pass token from postman
        //pass through isAuthenticated
        //pass through isAuthenticated
        //get _id
        //hash password
        //update that _id
        //send response



//mongodb atlas
=> website => we create cluster (big database) => link =>